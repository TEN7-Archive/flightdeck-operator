---
- name: Get the varnish secret name
  set_fact:
    _varnish_secret_name: "{{ varnish_secret | default('varnish-' + _phpapp_full_name) }}"
- name: Check if the varnish secret already exists
  set_fact:
    _varnish_secret_def: "{{ lookup('k8s', kind='secret', namespace=ansible_operator_meta.namespace, resource_name=_varnish_secret_name) }}"

- name: Create tempfile for the varnish secret
  tempfile:
    state: file
    prefix: "varnish_secret"
  register: _varnish_secret_passfile
  notify:
    - "delete varnish secret tempfile"
  when:
    - "(_varnish_secret_def | length) < 1"

- name: Get the varnish password
  set_fact:
    _varnish_secret_password: "\
      {% if _varnish_secret_def.data['secret'] is not defined %}\
      {{ lookup('password', '_varnish_secret_passfile.path chars=ascii_letters,digits,hexdigits,punctuation') }}\
      {% else %}\
      {{ _varnish_secret_def.data['secret'] | b64decode }}\
      {% endif %}"

- name: Create varnish secret if it doesn't exist
  k8s:
    definition: |
      apiVersion: v1
      data:
        secret: "{{ _varnish_secret_password | b64encode }}"
      kind: Secret
      metadata:
        name: {{ _varnish_secret_name }}
        labels:
          app.kubernetes.io/managed-by: "flightdeck-operator"
          app.kubernetes.io/created-by: "controller-manager"
          app.kubernetes.io/name: "varnish"
          app.kubernetes.io/instance: "{{ ansible_operator_meta.name }}"
          app.kubernetes.io/part-of: "{{ _phpapp_full_name }}"
      type: Opaque
    namespace: "{{ ansible_operator_meta.namespace }}"
  when:
    - "(_varnish_secret_def | length) < 1"

- name: Generate the mysql databases template partial
  set_fact:
    _settings_flightdeck_php_databases: |
      'mysql_databases' => array(
      {% for item in mysql_databases | default([]) %}
      {% set _db_def_namespace = item.namespace | default(ansible_operator_meta.namespace) %}
      {% set _db_def = lookup('k8s', kind='MySQLDatabase', namespace=_db_def_namespace, resource_name=item.name) %}
      {% if _db_def | length > 0 %}
      {% set _cluster_def_namespace = _db_def.spec.cluster.namespace | default(_db_def_namespace) %}
      {% set _cluster_def = lookup('k8s', kind='MySQLCluster', namespace=_cluster_def_namespace, resource_name=_db_def.spec.cluster.name) %}
      {% set _mysql_cluster_full_name = _cluster_def.spec.fullnameOverride | default(_db_def.spec.cluster.name + '-mysqlcluster') %}
        '{{ item.name }}' => array(
          'name' => '{{ _db_def.spec.dbName | default(item.name) }}',
          'host' => '{{ _mysql_cluster_full_name }}.{{ _cluster_def.metadata.namespace }}.svc.cluster.local',
          'port' => '3306',
        ),
      {% endif %}
      {% endfor %}
      ),

- name: Generate the mysql users template partial
  set_fact:
    _settings_flightdeck_php_mysql_users: |
      'mysql_users' => array(
      {% for item in mysql_users | default([]) %}
      {% set _user_def_namespace = item.namespace | default(ansible_operator_meta.namespace) %}
      {% set _user_def = lookup('k8s', kind='MySQLUser', namespace=_user_def_namespace, resource_name=item.name) %}
      {% if _user_def | length > 0 %}
      {% set _mysql_user_secret_name = _user_def.spec.passwordSecret | default(item.name + _user_def.spec.cluster.name + '-mysqluser' ) %}
      {% set _mysql_user_secret = lookup('k8s', kind='secret', namespace=item.namespace, resource_name=_mysql_user_secret_name) %}
      {% if _mysql_user_secret.data['db-pass.txt'] is defined %}
        '{{ item.name }}' => array(
          'username' => '{{ _user_def.spec.username | default(item.name) }}',
          'password' => {{ _mysql_user_secret.data['db-pass.txt'] | b64decode | quote }},
        ),
      {% endif %}
      {% endif %}
      {% endfor %}
      ),

- name: Generate the settings.flightdeck.php file
  set_fact:
    _settings_flightdeck_php: |
      <?php
      $flightdeck_settings = array(
        'varnish_secret' => {{ _varnish_secret_password | quote }},
        {{ _settings_flightdeck_php_databases | indent(2) }}
        {{ _settings_flightdeck_php_mysql_users | indent(2) }}
      );

- copy:
   content: "{{ _settings_flightdeck_php }}"
   dest: "~/settings.flightdeck.php"

- name: Create the settings.flightdeck.php secret
  k8s:
    definition: |
      apiVersion: v1
      data:
        settings.flightdeck.php: "{{ _settings_flightdeck_php | b64encode }}"
      kind: Secret
      metadata:
        name: {{ _phpapp_full_name + '-settings' }}
        labels:
          app.kubernetes.io/managed-by: "flightdeck-operator"
          app.kubernetes.io/created-by: "controller-manager"
          app.kubernetes.io/name: "php"
          app.kubernetes.io/instance: "{{ ansible_operator_meta.name }}"
          app.kubernetes.io/part-of: "{{ _phpapp_full_name }}"
      type: Opaque
    namespace: "{{ ansible_operator_meta.namespace }}"
