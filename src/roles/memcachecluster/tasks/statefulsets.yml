---
- name: Create memcache statefulset
  k8s:
    definition: |
      ---
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: {{ _memcache_cluster_full_name }}-cache
        labels:
          app.kubernetes.io/managed-by: "flightdeck-operator"
          app.kubernetes.io/created-by: "controller-manager"
          app.kubernetes.io/name: "MemcacheCluster"
          app.kubernetes.io/component: "memcache"
          app.kubernetes.io/instance: "{{ ansible_operator_meta.name }}"
          app.kubernetes.io/part-of: "{{ _memcache_cluster_full_name }}"
          flightdeck.ten7.io/memcachecluster: "{{ ansible_operator_meta.name }}"
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: "MemcacheCluster"
            app.kubernetes.io/component: "memcache"
            flightdeck.ten7.io/memcachecluster: "{{ ansible_operator_meta.name }}"
        serviceName: {{ _memcache_cluster_full_name }}-cache
        replicas: {{ replicas | default(3) }}
        template:
          metadata:
            labels:
              app.kubernetes.io/name: "MemcacheCluster"
              app.kubernetes.io/component: "memcache"
              flightdeck.ten7.io/memcachecluster: "{{ ansible_operator_meta.name }}"
          spec:
      {% if node_selector is defined %}
            nodeSelector:
              {{ _flightdeck_t7_io_memcachecluster_spec.nodeSelector | to_nice_yaml(indent=2) | indent(8) }}
      {% endif %}
      {% if (_flightdeck_t7_io_memcachecluster_spec is defined) and (_flightdeck_t7_io_memcachecluster_spec.affinity is defined )%}
            affinity:
              {{ _flightdeck_t7_io_memcachecluster_spec.affinity | to_nice_yaml(indent=2) | indent(8) }}
      {% endif %}
            containers:
              - name: "memcache"
                image: {{ image | default('ten7/flightdeck-memcache-1.6') }}
                imagePullPolicy: Always
      {% if _flightdeck_t7_io_memcachecluster_spec.resources is defined %}
                resources:
                  {{ _flightdeck_t7_io_memcachecluster_spec.resources | to_nice_yaml(indent=2) | indent(12) }}
      {% endif %}
                env:
      {% if flightdeck_debug | default(false) %}
                  - name: ANSIBLE_VERBOSITY
                    value: "4"
      {% endif %}
      {% if flightdeck_skip_entrypoint | default(false) %}
                  - name: FLIGHTDECK_SKIP_ENTRYPOINT
                    value: "1"
      {% endif %}
                ports:
                  - containerPort: {{ cache_port | default('11211') }}
                    name: memcache
                    protocol: TCP
                volumeMounts:
                  - name: "vol-config-flightdeck-memcache"
                    mountPath: "/config/memcache"
            volumes:
              - name: vol-config-flightdeck-memcache
                configMap:
                  name: {{ _memcache_cluster_full_name }}-cache
    namespace: "{{ ansible_operator_meta.namespace }}"
    wait: true
    wait_timeout: 120
# The wait parameter above doesn't seem to work because StatefulSet.spec.status
# doesn't have any conditions which Ansible requires. So we hack around it.
- name: Wait for statefulset pods to be ready
  k8s_info:
    api_version: "apps/v1"
    kind: statefulset
    name: "{{ _memcache_cluster_full_name }}-cache"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: _statefulset_info
  until: (_statefulset_info.resources[0].status.readyReplicas | default(0)) == (replicas | default(1))
  retries: 5
  delay: 30
# We create the memcache services right after the statefulset so twemproxy doesn't
# go intro retry while waiting for the daemonset to spin up.
- name: Create the memcache service
  k8s:
    definition: |
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: {{ _memcache_cluster_full_name }}-cache
        labels:
          app.kubernetes.io/managed-by: "flightdeck-operator"
          app.kubernetes.io/created-by: "controller-manager"
          app.kubernetes.io/name: "MemcacheCluster"
          app.kubernetes.io/component: "memcache"
          app.kubernetes.io/instance: "{{ ansible_operator_meta.name }}"
          app.kubernetes.io/part-of: "{{ _memcache_cluster_full_name }}"
          flightdeck.ten7.io/memcachecluster: "{{ ansible_operator_meta.name }}"
      spec:
        clusterIP: None
        ports:
          - name: memcache
            port: {{ cache_port | default('11211') }}
            protocol: TCP
        selector:
          app.kubernetes.io/name: "MemcacheCluster"
          app.kubernetes.io/component: "memcache"
          flightdeck.ten7.io/memcachecluster: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
