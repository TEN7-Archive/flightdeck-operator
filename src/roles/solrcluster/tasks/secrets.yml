- name: Get the solr admin secret name
  set_fact:
    _solr_admin_secret_name: "{{ solr_admin.secret | default('admin-' + _solr_cluster_full_name) }}"
- name: Check if the solr admin secret already exists
  set_fact:
    _solr_admin_secret_def: "{{ lookup('k8s', kind='secret', namespace=ansible_operator_meta.namespace, resource_name=_solr_admin_secret_name) }}"

- name: Get the solr admin password
  set_fact:
    _solr_admin_user: "\
      {% if _solr_admin_secret_def.data['user'] is not defined %}\
      {{ solr_admin.name | default('admin') }}\
      {% else %}\
      {{ _solr_admin_secret_def.data['user'] | b64decode }}\
      {% endif %}"
    _solr_admin_password: "\
      {% if _solr_admin_secret_def.data['password'] is not defined %}\
      {{ lookup('password', '/dev/null chars=ascii_letters,digits,hexdigits,punctuation length=20') }}\
      {% else %}\
      {{ _solr_admin_secret_def.data['password'] | b64decode }}\
      {% endif %}"

- name: Create solr admin secret
  k8s:
    definition: |
      apiVersion: v1
      data:
        user: "{{ _solr_admin_user | b64encode }}"
        password: "{{ _solr_admin_password | b64encode }}"
      kind: Secret
      metadata:
        name: {{ _solr_admin_secret_name }}
        labels:
          app.kubernetes.io/managed-by: "flightdeck-operator"
          app.kubernetes.io/created-by: "controller-manager"
          app.kubernetes.io/name: "SolrCluster"
          app.kubernetes.io/instance: "{{ ansible_operator_meta.name }}"
          app.kubernetes.io/part-of: "{{ _solr_cluster_full_name }}"
          flightdeck.ten7.io/solrcluster: "{{ ansible_operator_meta.name }}"
      type: Opaque
    namespace: "{{ ansible_operator_meta.namespace }}"
  when:
    - "(_solr_admin_secret_def | length) < 1"
