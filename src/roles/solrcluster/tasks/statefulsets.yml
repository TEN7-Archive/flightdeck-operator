---
- name: Create solr statefulset
  k8s:
    definition: |
      ---
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: {{ _solr_cluster_full_name }}
        labels:
          app.kubernetes.io/managed-by: "flightdeck-operator"
          app.kubernetes.io/created-by: "controller-manager"
          app.kubernetes.io/name: "SolrCluster"
          app.kubernetes.io/component: "search"
          app.kubernetes.io/instance: "{{ ansible_operator_meta.name }}"
          app.kubernetes.io/part-of: "{{ _solr_cluster_full_name }}"
          flightdeck.ten7.io/solrcluster: "{{ ansible_operator_meta.name }}"
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: "SolrCluster"
            app.kubernetes.io/component: "search"
            flightdeck.ten7.io/solrcluster: "{{ ansible_operator_meta.name }}"
        serviceName: {{ _solr_cluster_full_name }}
        replicas: {{ replicas | default(3) }}
        template:
          metadata:
            labels:
              app.kubernetes.io/name: "SolrCluster"
              app.kubernetes.io/component: "search"
              flightdeck.ten7.io/solrcluster: "{{ ansible_operator_meta.name }}"
          spec:
      {% if node_selector is defined %}
            nodeSelector:
              {{ _flightdeck_t7_io_solrcluster_spec.nodeSelector | to_nice_yaml(indent=2) | indent(8) }}
      {% endif %}
      {% if (_flightdeck_t7_io_solrcluster_spec is defined) and (_flightdeck_t7_io_solrcluster_spec.affinity is defined )%}
            affinity:
              {{ _flightdeck_t7_io_solrcluster_spec.affinity | to_nice_yaml(indent=2) | indent(8) }}
      {% endif %}
            securityContext:
              fsGroup: 1000
            containers:
              - name: "solr"
                image: {{ image | default('ten7/flightdeck-solr-8:develop') }}
                imagePullPolicy: Always
      {% if _flightdeck_t7_io_solrcluster_spec.resources is defined %}
                resources:
                  {{ _flightdeck_t7_io_solrcluster_spec.resources | to_nice_yaml(indent=2) | indent(12) }}
      {% endif %}
                env:
      {% if flightdeck_debug | default(false) %}
                  - name: ANSIBLE_VERBOSITY
                    value: "4"
      {% endif %}
      {% if flightdeck_skip_entrypoint | default(false) %}
                  - name: FLIGHTDECK_SKIP_ENTRYPOINT
                    value: "1"
      {% endif %}
                ports:
                  - containerPort: {{ port | default('8983') }}
                    name: solr
                    protocol: TCP
                volumeMounts:
                  - name: "config"
                    mountPath: "/config/solr"
                  - name: "data"
                    mountPath: "{{ solr.data_dir | default('/data') }}"
            volumes:
              - name: "config"
                configMap:
                  name: {{ _solr_cluster_full_name }}
      {% if (persistence.enabled | default(false) == true) and (persistence.existing_claim is not defined) %}
        volumeClaimTemplates:
          - metadata:
              name: "data"
              labels:
                app.kubernetes.io/managed-by: "flightdeck-operator"
                app.kubernetes.io/created-by: "controller-manager"
                app.kubernetes.io/name: "SolrCluster"
                app.kubernetes.io/component: "search"
                app.kubernetes.io/instance: "{{ ansible_operator_meta.name }}"
                app.kubernetes.io/part-of: "{{ _solr_cluster_full_name }}"
                flightdeck.ten7.io/solrcluster: "{{ ansible_operator_meta.name }}"
            spec:
              accessModes:
      {% for _accessMode in persistence.access_modes | default(['ReadWriteOnce']) %}
                - {{ _accessMode }}
      {% endfor %}
      {% if persistence.storage_class is defined %}
              storageClassName: "{{ persistence.storage_class }}"
      {% endif %}
              resources:
                requests:
                  storage: {{ persistence.size | default('10Gi') }}
      {% endif %}
    namespace: "{{ ansible_operator_meta.namespace }}"
    wait: true
    wait_timeout: 120

# The wait parameter above doesn't seem to work because StatefulSet.spec.status
# doesn't have any conditions which Ansible requires. So we hack around it.
- name: Wait for statefulset pods to be ready
  k8s_info:
    api_version: "apps/v1"
    kind: statefulset
    name: "{{ _solr_cluster_full_name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: _statefulset_info
  until: (_statefulset_info.resources[0].status.readyReplicas | default(0)) == (replicas | default(1))
  retries: 5
  delay: 30
