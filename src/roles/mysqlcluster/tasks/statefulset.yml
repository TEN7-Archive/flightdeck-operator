---
- name: Create mysql statefulset
  k8s:
    definition: |
      ---
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: {{ _mysql_cluster_full_name }}
        labels:
          app.kubernetes.io/managed-by: "flightdeck-operator"
          app.kubernetes.io/created-by: "controller-manager"
          app.kubernetes.io/name: "MySQLCluster"
          app.kubernetes.io/instance: "{{ ansible_operator_meta.name }}"
          app.kubernetes.io/part-of: "{{ _mysql_cluster_full_name }}"
          flightdeck.ten7.io/mysqlcluster: "{{ ansible_operator_meta.name }}"
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: "MySQLCluster"
            app.kubernetes.io/component: "mysql"
            flightdeck.ten7.io/mysqlcluster: "{{ ansible_operator_meta.name }}"
        serviceName: {{ _mysql_cluster_full_name }}
        replicas: {{ replicas | default(1) }}
        template:
          metadata:
            labels:
              app.kubernetes.io/name: "MySQLCluster"
              app.kubernetes.io/component: "mysql"
              flightdeck.ten7.io/mysqlcluster: "{{ ansible_operator_meta.name }}"
          spec:
      {% if node_selector is defined %}
            nodeSelector:
              {{ _flightdeck_t7_io_mysqlcluster_spec.nodeSelector | to_nice_yaml(indent=2) | indent(8) }}
      {% endif %}
      {% if (_flightdeck_t7_io_mysqlcluster_spec is defined) and (_flightdeck_t7_io_mysqlcluster_spec.affinity is defined )%}
            affinity:
              {{ _flightdeck_t7_io_mysqlcluster_spec.affinity | to_nice_yaml(indent=2) | indent(8) }}
      {% endif %}
      {% if persistence.enabled | default(false) == true %}
            initContainers:
              # The PVC is owned by root by default. This means that a non-root container
              # cannot create directories. So, we change the ownership to the UID/GID of
              # the account under which the database container runs.
              - name: "fix-pvc-permissions"
                image: "alpine"
                command:
                  - "sh"
                  - "-c"
                  - "chown -R 1000:1000 /var/lib/mysql"
                volumeMounts:
                  - mountPath: /var/lib/mysql
                    name: data
      {% endif %}
            containers:
              - name: "db"
                image: {{ image | default('ten7/flightdeck-db-10.6') }}
                imagePullPolicy: Always
      {% if resources is defined %}
                resources:
                  {{ resources | to_nice_yaml(indent=2) | indent(12) }}
      {% endif %}
                ports:
                  - containerPort: 3306
                    name: mysql
                    protocol: TCP
                volumeMounts:
      {% if persistence.enabled | default(false) == true %}
                  - mountPath: /var/lib/mysql
                    name: data
      {% endif %}
                  - name: "mysql-root"
                    mountPath: "/config/mysql-root"
                  - name: "mysql-operator"
                    mountPath: /config/operator
                  - name: "mysql-reader"
                    mountPath: /config/mysql-reader
                  - name: "mysql-config"
                    mountPath: "/config/mysql"
            volumes:
      {% if (persistence.enabled | default(false) == true) and (persistence.existing_claim is defined) %}
              - name: data
                persistentVolumeClaim:
                  claimName: "{{ persistence.existing_claim | default(_default_volume_name) }}"
      {% endif %}
              - name: "mysql-root"
                secret:
                  secretName: {{ _mysql_root_secret_name }}
              - name: "mysql-operator"
                secret:
                  secretName: {{ _mysql_operator_secret_name }}
              - name: "mysql-reader"
                secret:
                  secretName: {{ _mysql_readers_secret_name }}
              - name: "mysql-config"
                configMap:
                  name: config-{{ _mysql_cluster_full_name }}
      {% if (persistence.enabled | default(false) == true) and (persistence.existing_claim is not defined) %}
        volumeClaimTemplates:
          - metadata:
              name: "data"
              labels:
                app.kubernetes.io/managed-by: "flightdeck-operator"
                app.kubernetes.io/created-by: "controller-manager"
                app.kubernetes.io/name: "MySQLCluster"
                app.kubernetes.io/instance: "{{ ansible_operator_meta.name }}"
                app.kubernetes.io/part-of: "{{ _mysql_cluster_full_name }}"
                flightdeck.ten7.io/mysqlcluster: "{{ ansible_operator_meta.name }}"
            spec:
              accessModes:
                - {{ access_mode | default('ReadWriteOnce') }}
      {% if storage_class is defined %}
              storageClassName: "{{ storage_class }}"
      {% endif %}
              resources:
                requests:
                  storage: {{ size | default('10Gi') }}
      {% endif %}
    namespace: "{{ ansible_operator_meta.namespace }}"
    wait: true
    wait_timeout: 120
  vars:
    _default_volume_name: "{{ persistence.name | default(_mysql_cluster_full_name) }}"

# The wait parameter above doesn't seem to work because StatefulSet.spec.status
# doesn't have any conditions which Ansible requires. So we hack around it.
- name: Wait for statefulset pods to be ready
  k8s_info:
    api_version: "apps/v1"
    kind: statefulset
    name: "{{ _mysql_cluster_full_name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: _statefulset_info
  until: (_statefulset_info.resources[0].status.readyReplicas | default(0)) == (replicas | default(1))
  retries: 5
  delay: 30

# - debug: var=_statefulset_info.resources[0].status.readyReplicas
