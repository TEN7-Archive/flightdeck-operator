---
- name: Fetch the MySQLCluster definition
  set_fact:
    _cluster_def: "{{ lookup('k8s', kind='MySQLCluster', namespace=_cluster_def_namespace, resource_name=cluster.name) }}"
  vars:
    _cluster_def_namespace: "{{ cluster.namespace | default(ansible_operator_meta.namespace) }}"
- fail:
    msg: "Could not find requested MySQLCluster {{ cluster.name }}"
  when:
    - "(_cluster_def | default([])) | length < 1"

- name: Generate the cluster name
  set_fact:
    _mysql_cluster_full_name: "{{ _cluster_def.spec.fullname_override | default(cluster.name + '-mysqlcluster') }}"

- name: Get the mysql operator secret name
  set_fact:
    _mysql_operator_secret_name: "{{ _cluster_def.spec.mysql_operator_secret | default('operator-' + _mysql_cluster_full_name) }}"

- name: Fetch the operator secret
  set_fact:
    _mysql_operator_secret_def: "{{ lookup('k8s', api_version='v1', kind='secret', namespace=_cluster_def.metadata.namespace, resource_name=_mysql_operator_secret_name) }}"
- fail:
    msg: "Could not get password from secret: {{ _mysql_operator_secret_name }}"
  when:
    - "(_mysql_operator_secret_def.data['db-pass.txt'] | default('')) == ''"

- name: Get the operator password from the secret
  set_fact:
    _mysql_operator_user: "{{ _mysql_operator_secret_def.data['db-user.txt'] | b64decode }}"
    _mysql_operator_password: "{{ _mysql_operator_secret_def.data['db-pass.txt'] | b64decode }}"

- name: Get the mysql user secret name
  set_fact:
    _mysql_user_secret_name: "{{ password_secret | default(ansible_operator_meta.name + '-' + cluster.name + '-mysqluser') }}"
- name: Check if the mysql user secret already exists
  set_fact:
    _mysql_user_secret_def: "{{ lookup('k8s', kind='secret', namespace=ansible_operator_meta.namespace, resource_name=_mysql_user_secret_name) }}"

- name: Create tempfile for the password
  tempfile:
    state: file
    prefix: "mysql_user_secret"
  register: _mysql_user_secret_passfile
  notify:
    - "delete mysql user secret tempfile"
  when:
    - "(_mysql_user_secret_def | length) < 1"

- name: Get the user password
  set_fact:
    _mysql_user_password: "\
      {% if _mysql_user_secret_def.data['db-pass.txt'] is not defined %}\
      {{ lookup('password', '_mysql_user_secret_passfile.path chars=ascii_letters,digits,hexdigits,punctuation') }}\
      {% else %}\
      {{ _mysql_user_secret_def.data['db-pass.txt'] | b64decode }}\
      {% endif %}"

- name: Create mysql readers secret if not specified
  k8s:
    definition: |
      apiVersion: v1
      data:
        db-pass.txt: "{{ _mysql_user_password | b64encode }}"
      kind: Secret
      metadata:
        name: {{ _mysql_user_secret_name }}
      type: Opaque
    namespace: "{{ ansible_operator_meta.namespace }}"
  when:
    - "(_mysql_user_secret_def | length) < 1"

- name: Create the MySQL user
  mysql_user:
    name: "{{ username | default(ansible_operator_meta.name) | regex_replace('\\-', '_') }}"
    host: "{{ host | default('%') }}"
    password: "{{ _mysql_user_password }}"
    priv: "{% for _item in privileges %}\
           {{ _item.database }}.{{ _item.table | default('*') }}:\
           {% if _item.grant is defined %}{{ _item.grant }}\
           {% elif _item.grants is defined %}{{ _item.grants | join(',') }}\
           {% else %}USAGE{% endif %}\
           {% if not loop.last %}/{% endif %}\
           {% endfor %}"
    state: present
    login_user: "{{ _mysql_operator_user }}"
    login_password: "{{ _mysql_operator_password }}"
    login_host: "{{_mysql_cluster_full_name }}-0.{{ _cluster_def.spec.service.name | default(_mysql_cluster_full_name) }}.{{ _cluster_def.metadata.namespace }}.svc.cluster.local"
    append_privs: yes
